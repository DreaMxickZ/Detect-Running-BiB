import cv2
import numpy as np
import easyocr
from ultralytics import YOLO
import time
import os
import uuid
import firebase_admin
from firebase_admin import credentials, storage, firestore
from datetime import datetime
import threading
import queue
from collections import defaultdict
import gc
import signal
import sys
import tempfile
import platform

# üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å
FIREBASE_CREDENTIAL = "firebase_key.json"
FIREBASE_BUCKET = "detech-bib-running.firebasestorage.app"
YOLO_MODEL_PATH = "runs/detect/bib_aug_yolo_default/weights/best.pt"

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö
detected_bibs = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏•‡∏Ç bib ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß
bib_tracking = defaultdict(int)  # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° bib ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏µ‡πà‡πÄ‡∏ü‡∏£‡∏°
upload_queue = queue.Queue(maxsize=50)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏¥‡∏ß
running = True
processing_lock = threading.Lock()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition

# üéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
DETECTION_CONFIDENCE = 0.6  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
OCR_CONFIDENCE = 0.7        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
MIN_TRACKING_FRAMES = 2     # ‡∏•‡∏î‡∏•‡∏á
PROCESS_EVERY_N_FRAMES = 5  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô (‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á)
MAX_TRACKING_HISTORY = 100  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bib ‡∏ó‡∏µ‡πà track
CAMERA_TIMEOUT = 5.0        # timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á

def signal_handler(sig, frame):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ signal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    global running
    print("\nüõë Received interrupt signal, shutting down safely...")
    running = False

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def get_temp_directory():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö temp directory ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
    try:
        # ‡πÉ‡∏ä‡πâ tempfile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ temp directory ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        temp_dir = tempfile.gettempdir()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á subdirectory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ
        app_temp_dir = os.path.join(temp_dir, "bib_detection")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á directory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        os.makedirs(app_temp_dir, exist_ok=True)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        test_file = os.path.join(app_temp_dir, "test_write.tmp")
        try:
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            print(f"‚úÖ Temp directory ready: {app_temp_dir}")
            return app_temp_dir
        except:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ current directory
            print(f"‚ö†Ô∏è Cannot write to {app_temp_dir}, using current directory")
            return os.path.join(os.getcwd(), "temp_images")
    except Exception as e:
        print(f"‚ùå Error setting up temp directory: {e}")
        # fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ current directory
        fallback_dir = os.path.join(os.getcwd(), "temp_images")
        os.makedirs(fallback_dir, exist_ok=True)
        return fallback_dir

def check_required_files():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    missing_files = []
    
    if not os.path.exists(FIREBASE_CREDENTIAL):
        missing_files.append(FIREBASE_CREDENTIAL)
    
    if not os.path.exists(YOLO_MODEL_PATH):
        missing_files.append(YOLO_MODEL_PATH)
    
    if missing_files:
        print("‚ùå Missing required files:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    return True

def init_firebase():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Firebase"""
    try:
        if not check_required_files():
            return None, None, None
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Firebase ‡πÑ‡∏î‡πâ initialize ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        try:
            firebase_admin.get_app()
            print("‚úÖ Firebase already initialized")
        except ValueError:
            cred = credentials.Certificate(FIREBASE_CREDENTIAL)
            firebase_admin.initialize_app(cred, {
                'storageBucket': FIREBASE_BUCKET
            })
            print("‚úÖ Firebase initialized successfully")
        
        db = firestore.client()
        bucket = storage.bucket()
        return db, bucket, True
    except Exception as e:
        print(f"‚ùå Firebase initialization error: {e}")
        return None, None, False

def load_models():
    """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO ‡πÅ‡∏•‡∏∞ OCR"""
    try:
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ YOLO ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
        model = YOLO(YOLO_MODEL_PATH)
        model.overrides['verbose'] = False  # ‡∏•‡∏î log
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OCR ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ GPU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        reader = easyocr.Reader(['en'], gpu=True if cv2.cuda.getCudaEnabledDeviceCount() > 0 else False)
        print("‚úÖ Models loaded successfully")
        return model, reader, True
    except Exception as e:
        print(f"‚ùå Model loading error: {e}")
        return None, None, False

def clean_text(text):
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç bib ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    if not text or len(text.strip()) == 0:
        return None
        
    # ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    cleaned = ''.join(filter(str.isalnum, str(text).strip()))
    
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if cleaned.isdigit() and len(cleaned) >= 1:
        return cleaned
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    numbers_only = ''.join(filter(str.isdigit, cleaned))
    if numbers_only and len(numbers_only) >= 1:
        return numbers_only
    
    return None

def is_valid_bib_number(bib_number):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç bib ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    if not bib_number or not str(bib_number).isdigit():
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 1-6 ‡∏´‡∏•‡∏±‡∏Å)
    if len(str(bib_number)) < 1 or len(str(bib_number)) > 6:
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    try:
        bib_int = int(bib_number)
        if bib_int < 1 or bib_int > 99999:
            return False
    except ValueError:
        return False
    
    return True

def check_bib_exists(db, bib_number):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bib ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Firebase ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        query = db.collection("runners").where(filter=firestore.FieldFilter("bib_number", "==", str(bib_number))).limit(1)
        docs = list(query.stream())
        return len(docs) > 0
    except Exception as e:
        print(f"‚ùå Error checking bib existence: {e}")
        return False

def save_image_safely(image, file_path, max_retries=3):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism"""
    if image is None or image.size == 0:
        print("‚ùå Invalid image data")
        return False
    
    for attempt in range(max_retries):
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ directory ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            directory = os.path.dirname(file_path)
            if directory and not os.path.exists(directory):
                os.makedirs(directory, exist_ok=True)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            if len(image.shape) == 3 and image.shape[2] == 3:  # BGR image
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
                enhanced = cv2.convertScaleAbs(image, alpha=1.1, beta=5)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
                encode_params = [cv2.IMWRITE_JPEG_QUALITY, 95]
                success = cv2.imwrite(file_path, enhanced, encode_params)
            else:
                success = cv2.imwrite(file_path, image)
            
            if success and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                return True
            else:
                print(f"‚ö†Ô∏è Image save attempt {attempt + 1} failed (file not created or empty)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Image save attempt {attempt + 1} error: {e}")
        
        # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô retry
        if attempt < max_retries - 1:
            time.sleep(0.1)
    
    print(f"‚ùå Failed to save image after {max_retries} attempts: {file_path}")
    return False

def upload_worker(db, bucket):
    """Worker thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"""
    temp_dir = get_temp_directory()
    
    while running:
        try:
            # ‡πÉ‡∏ä‡πâ timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ thread ‡∏Ñ‡πâ‡∏≤‡∏á
            upload_data = upload_queue.get(timeout=2.0)
            
            if upload_data is None:  # Signal to stop
                break
                
            bib_number = upload_data['bib_number']
            crop_image = upload_data['crop']
            confidence = upload_data['confidence']
            detection_time = upload_data['timestamp']
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            unique_id = str(uuid.uuid4())[:8]
            filename = f"bib_{bib_number}_{int(detection_time)}_{unique_id}.jpg"
            local_path = os.path.join(temp_dir, filename)
            
            try:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
                success = save_image_safely(crop_image, local_path)
                if not success:
                    print(f"‚ùå Failed to save temp image for bib {bib_number}")
                    continue
                
                print(f"‚úÖ Image saved locally: {filename} (Size: {os.path.getsize(local_path)} bytes)")
                
                # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage
                blob = bucket.blob(f'bibs/{filename}')
                blob.upload_from_filename(local_path)
                blob.make_public()
                image_url = blob.public_url
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore
                doc_data = {
                    "bib_number": str(bib_number),
                    "cp3time": datetime.fromtimestamp(detection_time).strftime('%Y-%m-%dT%H:%M:%SZ'),
                    "guntime": None,
                    "image_url": image_url,
                    "detection_confidence": float(confidence),
                    "processed_at": firestore.SERVER_TIMESTAMP,
                    "detection_timestamp": detection_time
                }
                
                db.collection("runners").add(doc_data)
                print(f"‚úÖ Uploaded bib: {bib_number} (Confidence: {confidence:.2f})")
                
            except Exception as upload_error:
                print(f"‚ùå Upload error for bib {bib_number}: {upload_error}")
            finally:
                # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                try:
                    if os.path.exists(local_path):
                        os.remove(local_path)
                        print(f"üóëÔ∏è Cleaned up temp file: {filename}")
                except Exception as cleanup_error:
                    print(f"‚ö†Ô∏è Failed to cleanup temp file {filename}: {cleanup_error}")
            
        except queue.Empty:
            continue
        except Exception as e:
            if running:  # ‡πÅ‡∏™‡∏î‡∏á error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
                print(f"‚ùå Upload worker error: {e}")
            continue
    
    print("üîÑ Upload worker stopped")

def cleanup_tracking_data():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tracking ‡πÄ‡∏Å‡πà‡∏≤"""
    global bib_tracking
    
    if len(bib_tracking) > MAX_TRACKING_HISTORY:
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà bib ‡∏ó‡∏µ‡πà‡∏°‡∏µ count ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        sorted_bibs = sorted(bib_tracking.items(), key=lambda x: x[1], reverse=True)
        bib_tracking = defaultdict(int, dict(sorted_bibs[:MAX_TRACKING_HISTORY//2]))
        gc.collect()

def process_detections(frame, results, reader, db):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô"""
    if not running:
        return
        
    try:
        with processing_lock:
            current_frame_bibs = set()
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            boxes = results.boxes.data[:5] if len(results.boxes.data) > 5 else results.boxes.data
            
            for i, box in enumerate(boxes):
                if not running:
                    break
                    
                x1, y1, x2, y2, score, class_id = box.tolist()
                
                if score < DETECTION_CONFIDENCE:
                    continue
                
                # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
                color = (0, 255, 0) if score > 0.7 else (0, 255, 255)
                cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), color, 2)
                cv2.putText(frame, f"Det {i+1}: {score:.2f}", 
                           (int(x1), int(y1-30)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
                
                # ‡∏ï‡∏±‡∏î‡∏†‡∏≤‡∏û bib - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
                padding = 5  # ‡∏•‡∏î padding
                x1_pad = max(0, int(x1) - padding)
                y1_pad = max(0, int(y1) - padding)
                x2_pad = min(frame.shape[1], int(x2) + padding)
                y2_pad = min(frame.shape[0], int(y2) + padding)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î
                crop_width = x2_pad - x1_pad
                crop_height = y2_pad - y1_pad
                
                if crop_width < 20 or crop_height < 20:
                    print(f"‚ö†Ô∏è Crop too small: {crop_width}x{crop_height}")
                    continue
                
                crop = frame[y1_pad:y2_pad, x1_pad:x2_pad]
                
                if crop is None or crop.size == 0:
                    print("‚ö†Ô∏è Empty crop image")
                    continue
                
                # OCR - ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
                try:
                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
                    gray_crop = cv2.cvtColor(crop, cv2.COLOR_BGR2GRAY)
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
                    enhanced = cv2.convertScaleAbs(gray_crop, alpha=1.2, beta=10)
                    
                    # OCR
                    ocr_results = reader.readtext(enhanced, paragraph=False)
                    
                    best_bib = None
                    best_confidence = 0
                    
                    for (bbox, text, conf) in ocr_results:
                        if conf > OCR_CONFIDENCE:
                            cleaned_text = clean_text(text)
                            
                            if cleaned_text and is_valid_bib_number(cleaned_text):
                                if conf > best_confidence:
                                    best_bib = cleaned_text
                                    best_confidence = conf
                    
                    if best_bib:
                        current_frame_bibs.add(best_bib)
                        bib_tracking[best_bib] += 1
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                        text_color = (0, 255, 0) if best_bib in detected_bibs else (0, 0, 255)
                        cv2.putText(frame, f"BIB: {best_bib} ({bib_tracking[best_bib]})", 
                                   (int(x1), int(y1-10)), 
                                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, text_color, 2)
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                        if (bib_tracking[best_bib] >= MIN_TRACKING_FRAMES and 
                            best_bib not in detected_bibs):
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Firebase
                            if not check_bib_exists(db, best_bib):
                                detected_bibs.add(best_bib)
                                
                                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (non-blocking)
                                upload_data = {
                                    'bib_number': best_bib,
                                    'crop': frame.copy(),
                                    'confidence': score,
                                    'timestamp': time.time()
                                }
                                
                                try:
                                    upload_queue.put_nowait(upload_data)
                                    print(f"üéØ NEW BIB: {best_bib} (YOLO: {score:.2f}, OCR: {best_confidence:.2f})")
                                except queue.Full:
                                    print("‚ö†Ô∏è Upload queue full, skipping...")
                            else:
                                detected_bibs.add(best_bib)
                                print(f"‚ö†Ô∏è Bib {best_bib} already exists")
                                
                except Exception as ocr_error:
                    cv2.putText(frame, "OCR Failed", 
                               (int(x1), int(y1-10)), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
                    print(f"‚ùå OCR error: {ocr_error}")
                    continue
            
            # ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ tracking
            bibs_to_reduce = set(bib_tracking.keys()) - current_frame_bibs
            for bib in list(bibs_to_reduce):  # ‡πÉ‡∏ä‡πâ list() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô dictionary size change
                bib_tracking[bib] = max(0, bib_tracking[bib] - 1)
                if bib_tracking[bib] == 0:
                    del bib_tracking[bib]
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            if len(bib_tracking) > MAX_TRACKING_HISTORY:
                cleanup_tracking_data()
                
    except Exception as e:
        if running:
            print(f"‚ùå Processing error: {e}")

def setup_camera():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á - ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ MSMF"""
    cap = None
    
    # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ backend ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á
    backends = [
        cv2.CAP_DSHOW,    # DirectShow (Windows)
        cv2.CAP_MSMF,     # Microsoft Media Foundation
        cv2.CAP_V4L2,     # Video4Linux (Linux)
        cv2.CAP_ANY       # Auto detect
    ]
    
    camera_indices = [0, 1, 2]  # ‡∏•‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á index 0, 1, 2
    
    for backend in backends:
        for camera_idx in camera_indices:
            try:
                print(f"üîç Trying camera {camera_idx} with backend {backend}")
                cap = cv2.VideoCapture(camera_idx, backend)
                
                if not cap.isOpened():
                    if cap:
                        cap.release()
                    continue
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô
                try:
                    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
                    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
                    cap.set(cv2.CAP_PROP_FPS, 15)
                    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                    
                    # ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß
                    time.sleep(1)
                    
                    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏° 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    success_count = 0
                    for i in range(3):
                        ret, test_frame = cap.read()
                        if ret and test_frame is not None:
                            success_count += 1
                        time.sleep(0.1)
                    
                    if success_count >= 2:  # ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2/3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                        print(f"‚úÖ Camera {camera_idx} ready (backend: {backend})")
                        print(f"üìê Resolution: {int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))}x{int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))}")
                        print(f"üìä FPS: {int(cap.get(cv2.CAP_PROP_FPS))}")
                        return cap
                    else:
                        print(f"‚ùå Camera {camera_idx} can't read frames consistently")
                        cap.release()
                        cap = None
                        
                except Exception as setup_error:
                    print(f"‚ùå Camera {camera_idx} setup error: {setup_error}")
                    if cap:
                        cap.release()
                    cap = None
                    continue
                    
            except Exception as e:
                print(f"‚ùå Camera {camera_idx} backend {backend} error: {e}")
                if cap:
                    cap.release()
                cap = None
                continue
    
    print("‚ùå No working camera found!")
    print("üí° Try these solutions:")
    print("   1. Check if camera is being used by another app")
    print("   2. Try different USB port")
    print("   3. Update camera drivers")
    print("   4. Run as administrator")
    print("   5. Check Windows Camera privacy settings")
    
    return None

def main():
    global running
    
    print("üöÄ Starting Enhanced Real-time BIB Detection System...")
    print(f"üéØ Detection Settings:")
    print(f"   - YOLO Confidence: {DETECTION_CONFIDENCE}")
    print(f"   - OCR Confidence: {OCR_CONFIDENCE}")
    print(f"   - Min Tracking Frames: {MIN_TRACKING_FRAMES}")
    print(f"   - Process Every N Frames: {PROCESS_EVERY_N_FRAMES}")
    print(f"üñ•Ô∏è Platform: {platform.system()} {platform.release()}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    db, bucket, firebase_ok = init_firebase()
    model, reader, models_ok = load_models()
    
    if not firebase_ok or not models_ok:
        print("‚ùå System initialization failed!")
        return
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô upload worker thread
    upload_thread = threading.Thread(target=upload_worker, args=(db, bucket))
    upload_thread.daemon = True
    upload_thread.start()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cap = setup_camera()
    if cap is None:
        running = False
        return
    
    print("üéØ Starting BIB detection...")
    print("üìù Controls:")
    print("   - Press 'q' to quit")
    print("   - Press 'r' to reset detected bibs")
    print("   - Press 'c' to clear tracking")
    
    frame_count = 0
    fps_time = time.time()
    fps = 0
    last_cleanup = time.time()
    
    try:
        while running:
            ret, frame = cap.read()
            if not ret or frame is None:
                print("‚ùå Failed to read frame, retrying...")
                time.sleep(0.1)
                
                # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                retry_count = 0
                while retry_count < 3 and running:
                    time.sleep(0.2)
                    ret, frame = cap.read()
                    if ret and frame is not None:
                        break
                    retry_count += 1
                    print(f"üîÑ Retry reading frame {retry_count}/3")
                
                if not ret or frame is None:
                    print("‚ùå Camera connection lost, trying to reconnect...")
                    cap.release()
                    time.sleep(2)
                    
                    # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                    cap = setup_camera()
                    if cap is None:
                        print("‚ùå Cannot reconnect camera, stopping...")
                        break
                    continue
            
            frame_count += 1
            current_time = time.time()
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏∏‡∏Å N ‡πÄ‡∏ü‡∏£‡∏°
            if frame_count % PROCESS_EVERY_N_FRAMES == 0:
                try:
                    results = model(frame, verbose=False)[0]
                    process_detections(frame, results, reader, db)
                except Exception as e:
                    print(f"‚ùå Detection error: {e}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FPS
            if current_time - fps_time >= 1.0:
                fps = frame_count / (current_time - fps_time)
                frame_count = 0
                fps_time = current_time
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            cv2.putText(frame, f"FPS: {fps:.1f}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, f"Detected: {len(detected_bibs)}", (10, 60), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, f"Tracking: {len(bib_tracking)}", (10, 90), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, f"Queue: {upload_queue.qsize()}", (10, 120), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            try:
                cv2.imshow('BIB Detection System', frame)
            except cv2.error as cv_error:
                print(f"‚ùå Display error: {cv_error}")
                continue
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ keyboard input
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
            elif key == ord('r'):
                with processing_lock:
                    detected_bibs.clear()
                print("üîÑ Reset detected bibs")
            elif key == ord('c'):
                with processing_lock:
                    bib_tracking.clear()
                print("üîÑ Clear tracking data")
            
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÜ
            if current_time - last_cleanup > 30:  # ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                cleanup_tracking_data()
                gc.collect()
                last_cleanup = current_time
                
    except KeyboardInterrupt:
        print("\nüõë Keyboard interrupt received")
    except Exception as e:
        print(f"‚ùå Main loop error: {e}")
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        print("üîÑ Shutting down system...")
        running = False
        
        if cap:
            cap.release()
        cv2.destroyAllWindows()
        
        # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ upload worker ‡∏´‡∏¢‡∏∏‡∏î
        try:
            upload_queue.put_nowait(None)
        except:
            pass
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ upload thread ‡∏à‡∏ö
        if upload_thread.is_alive():
            upload_thread.join(timeout=5)
        
        print("üéâ System stopped safely")
        print(f"üìä Total detected bibs: {len(detected_bibs)}")
        if detected_bibs:
            sorted_bibs = sorted([int(x) for x in detected_bibs if x.isdigit()])
            print(f"üìù Detected numbers: {sorted_bibs}")

if __name__ == '__main__':
    main()